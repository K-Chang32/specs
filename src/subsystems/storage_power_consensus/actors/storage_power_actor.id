type PowerFraction 	Float
type StoragePower	UVarint

type StoragePowerConsensusSubsystem struct (@mutable) {

	InitStoragePowerSubsystem(stateTree)				StoragePowerSubsystem
	UpdateStoragePowerSubsystem(Tipset, StateTree)
	powerTable											PowerTable
	actor												StoragePowerActor
	associatedStateTree 								*StateTree
	NotifyStorageFault(Address)
	ChooseTipsetToMine([Tipset])						[Tipset]
	GenerateElectionProof(Tipset)						ElectionProof
}

type StoragePowerActor struct {
	
	VerifyElectionProof(Address, ElectionProof)	bool
	RegisterStorage(SealProof)					

	// What does graceful removal look like?
	UpdatePower()?
	NotifyConsensusFault(Address, [Block])
}

type PowerTable struct {
	// all power here is always verified
	minerPower							{Address:StorageMiner}
	getTotalStorage()					UVarint
	lookupMinerStorage(Address)			UVarint
	lookupMinerPowerFraction(Address)	Float
	removePower(Address)
	updatePower(Address, newPower)
}

type StorageMiner struct {
	minerAddress	Address
	minerStorage	UVarint
	isSuspended		Bool
	VRFKeyPair		VRFKeyPair
	VDFKeyPair		VDFKeyPair
}