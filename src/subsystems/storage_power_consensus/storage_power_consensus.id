type PowerFraction 	Float
type StoragePower	UVarint
type Seed struct {}
type PoStChallenge struct {}
type ElectionArtifacts struct {
	TK Ticket
	T1 Ticket
}

type StoragePowerConsensusSubsystem struct  { //(@mutable)
	// powerTable						PowerTable
	// actor							StoragePowerActor
	// associatedStateTree 			*StateTree
	// GenerateElectionProof(Tipset)	ElectionProof
	// ChooseTipsetToMine([Tipset])				[Tipset]

	// call by StorageMiningSubsystem in sealing sector
	GetSealSeed(chain Chain, epoch Epoch) Seed

	// call by StorageMiningSubsystem after sealing
	GetPoStChallenge(chain Chain, epoch Epoch) PoStChallenge

	// call by BlockchainSubsystem during block reception
	ValidateBlock(block Block) bool

	// call by StorageMiningSubsystem during block production
	GetElectionArtifacts(chain Chain, epoch Epoch) ElectionArtifacts

	// call by StoragePowerConsensusSubsystem itself during block production
	TicketAtEpoch(chain Chain, epoch Epoch) Ticket

	// call by StorageMiningSubsystem during block production
	TryLeaderElection(electionProof ElectionProof) bool

}


type PowerTable struct {
	// all power here is always verified
	// minerPower							{Address:StorageMiner}
	// LookupMinerStorage(Address)			UVarint
	// LookupMinerPowerFraction(Address)	Float
	// RemovePower(Address)
}

type StorageMiner struct {
	minerAddress	Address
	minerStorage	MinerStorage
	isSuspended		Bool
	VRFKeyPair		VRFKeyPair
	VDFKeyPair		VDFKeyPair
}

type minerStorage UVarint