type SectorId    UInt64
type ProverId    UInt64
type Commitment  Bytes32 //[32]byte
type DataElement Bytes32 //[32]byte
//type Rephash     func(left DataElement, right DataElement) hash Commitment
type Challenge   UInt64

type FaultSet   struct {} // [Fault] // More complicated than this.
// Constants can be zero-arg methods of structs (for now).

// Add data structures to minimize individual parameters.
// PublicInputs
// Configs.

type SectorConfig struct {
       SectorSize     UInt
       SubsectorCount UInt
       Partitions     Uint
}

// This is metadata required to generate a PoSt proof for a sector.
// These should be stored and indexed somewhere by CommR.
type SectorPersistentAux struct {
       CommRLast      Commitment
       CommC          Commitment
}

type StorageProvingSubsystem struct {
    VerifySeal(
		CommD    Commitment,
		CommR    Commitment,
		Proof    SNARKProof,
		ProverId ProverId,
		Ticket   Ticket,
		SectorId SectorId,
	) union { error, bool }


    SealSector(
		SectorConfig   SectorConfig,
		unsealedPath   String,
		sealedPath     String,
		proverId       ProverId,
		ticket         Ticket, // Assuming this is defined  elsewhere.
		sectorId       union { SectorId, error, SealResponse }
		) struct {}
		
//    Unseal(xxx Integer
//         // TODO
//    )

   GeneratePoSt(
     Challenge Challenge,
     CommRs    Commitments, //[commmitments],
     Trees     MerkleTree, //MerkleTree<Rephash>,
     Faults    FaultSet
   ) struct {}

   VerifyPoSt(
       // TODO
   ) struct {}

    GenerateCommP() struct {} 
    GenerateCommD() struct {}

    GeneratePieceInclusionProofs(
		Tree          MerkleTree, //MerkleTree<Rephash>,
		PieceStarts   UInts,//[]Uint,
		PieceLength   UInts, //[]Uint,
    ) union { error, PieceInclusionProof }

    GeneratePieceInclusionProof(
		Tree          MerkleTree, //MerkleTree<Rephash>,
		PieceStart    Uint,
		PieceLength   Uint,
    ) union { Error, PieceInclusionProofs }

   VerifyPieceInclusionProof(
   ) struct {}

   MaxUnsealedBytesPerSector(
      SectorSize UInt
   ) UInt
}


type SealResponse struct {
     CommD                 Commitment
     CommR                 Commitment
     Proof                 SealProof
     PersistentAux         SectorPersistentAux
     MerkleTreePath        Path // TODO: This may be a partially-cached tree.
}

type SealPublicInputs struct {}

type SealProofConfig struct {
    partitionCount UInt
    subsectorsCount UInt
}

type SNARKProof struct { //<curve, system> {
     config SealProofConfig
     proofBytes Bytes
}

type FilecoinSNAKRProof struct {} //<bls12-381, Groth16>

type SealProof struct {
     snarkProof      SNARKProof,
     susbsectorCount Uvarint,
}

type PieceInclusionProof struct {
}

