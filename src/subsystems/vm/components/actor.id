// This contains actor things that are _outside_ of VM exection.
// The VM uses this to execute actors.


type ActorID UVarint

type CallSeqNo UVarint

// Question for language:
// - we should not do inheritance, we should do composition.
//   but we should make including actor state nicer.
// -
type Actor struct {
	// common fields for all actors
	Balance TokenAmount
	SeqNo   CallSeqNo // FKA Nonce

    CodeCID() CID
}

// SystemActor is a union that defines actors. It's needed
// in the type system to be able to refer to actors generically.
//

type Actor union {
    // TODO: enable when we allow UserActors
    //       this is here to distinguish actors
    // UserActor
    SystemActor
}

type SystemActor union {
	| InitActor
	| AccountActor
	| StoragePowerActor
	| StorageMinerActor
	| CronActor
	| PaymentChannelActor
}


// type ActorMethod union {
// 	| InitActorMethod
// 	| AccountActorMethod
// 	| StoragePowerActorMethod
// 	| StorageMinerActorMethod
// 	| CronActorMethod
// 	| PaymentChannelActorMethod
// }

// type StoragePowerActorState struct {
// 	// maintain storage power over time
// 	Meta ActorMeta
// 	PowerTableMap {Address:BytesAmount}

// 	GetPowerForMiner(Address) BytesAmount
// 	PutPowerForMiner(Address, BytesAmount) bool
// }

// type StorageMinerActorState struct {
// 	Meta ActorMeta
// 	RegisterMiner(PublicKey, BytesAmount) Address
// }

// type CronActorState struct {
// 	Meta ActorMeta
// }

// type PaymentChannelActorState struct {
// 	Meta ActorMeta
// }
