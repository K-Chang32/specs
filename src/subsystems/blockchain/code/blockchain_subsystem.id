type Epoch Uvarint
type SectorID struct {}
type Randomness struct {}

type BlockchainSubsystem struct @(mutable) {
    // LatestEpoch() Epoch
    // BestChain() Chain
    // CandidateChains() []Chain

    // // Receiving blocks and tipset
    // NewTipsets() TipsetChan
    // NewBestTipset() TipsetChan
    // ProcessBlock(Block)

    // validateBlockSemantics(Block)
    // SyncState() union {
    //     Booting
    //     CatchingUp
    //     Synchronized
    // }

    // call by StorageClient in StorageDealMake
    VerifySectorExists(sectorId SectorID) bool
    
    // call by BlockSyncer in BlockReception
    HandleBlock(block Block) bool

    // call by BlockchainSubsystem itself in BlockProduction
    ValidateBlock(block Block) bool

    // call by BlockchainSubsystem itself in BlockProduction
    // apply messages in the parent tipset to the StateTree
    // and verify state root
    TryGenerateStateTree(block Block) union { StateTree, Error }

    // call by clock in BlockReception after Round Cutoff
    // TODO define clock here
    AssembleTipsets() [Tipset]

    // call by BlockchainSubsystem itself in BlockReception after Round Cutoff
    ChooseTipset(tipsets [Tipset]) Tipset

    // call by StorageMining
    GetPostRandomness() Randomness

}

// type Chain struct {
//     HeadEpoch() Epoch
//     FinalizedEpoch() Epoch
//     LatestCheckpoint() Epoch

//     TipsetAtEpoch(epoch Epoch) Tipset
// }

// type ChainWeight UVarint

// type Address struct {
// 	NetworkID union {
// 		Testnet
// 		Mainnet
// 	}
// 	Protocol union {
// 		ID
// 		Secp256k1
// 		Actor
// 		BLS
//     }

//     VerifySyntax(addrType) bool
// }

// func (addr *Address) VerifySyntax(addrType) {
//     // TODO
// }
