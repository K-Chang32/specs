type PubKey struct {}
type StorageDeal struct {}

type ElectionProof struct {
    // Output is generated from Ticket.VDFOutput output of a ticket drawn k-rounds back
    VRFArtifacts VRFArtifacts
}

type Ticket struct {
    // The VRFProof (pi_string in the RFC) is generated by running our VRF on a past ticket
    // in the ticket chain signed with the miner's keypair. This field is 97 bytes long
    // (may be compressible to 80).
    LastRoundVDF VRFArtifacts

    // The VDFResult is derived from the VRFResult of the ticket. It is the value that
    // will be used to generate future tickets or ElectionProofs.
    LastBlockVDF VDFArtifacts

    // The VDF proves a delay between tickets generated.
} // representation tuple



type StorageMiningSubsystem struct {
    // actors [&StorageMinerActor]
    // StartMining() struct {}
    // StopMining() struct {}

    CreateMiner(ownerPubKey PubKey, workerPubKey PubKey, pledgeAmt TokenAmount) struct {}
    HandleStorageDeal(deal StorageDeal, pieceRef CID) struct {}
    OnNewTipset(chain Chain, epoch Epoch) struct{}
    // GenerateTickets(randomness Ticket) [Ticket] // TODO
}
