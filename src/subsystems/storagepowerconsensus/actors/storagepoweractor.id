type PowerFraction 	Float
type StoragePower	UVarint

type StoragePowerConsensusSubsystem struct (@mutable) {
	powerTable						PowerTable
	actor							StoragePowerActor
	associatedStateTree 			*StateTree
	GenerateElectionProof(Tipset)	ElectionProof
	ChooseTipsetToMine([Tipset])				[Tipset]
}

type StoragePowerActor struct {

	UpdateStoragePowerSubsystem(Tipset, StateTree)
	
	VerifyElectionProof(Address, ElectionProof)	bool
	TotalStorage()								UVarint

	// What does graceful removal look like?
	NotifyConsensusFault(Address, [Block])
	NotifyStorageFault(Address)
	TryPublishBlock(StateTree)					Block
	
	RegisterStorageMiner(SealProof)				Address
	TryUpdateStorage(Address, newPower)			error					
}

type PowerTable struct {
	// all power here is always verified
	minerPower							{Address:StorageMiner}
	LookupMinerStorage(Address)			UVarint
	LookupMinerPowerFraction(Address)	Float
	RemovePower(Address)
	UpdatePower(Address, newPower)
}

type StorageMiner struct {
	minerAddress	Address
	minerStorage	UVarint
	isSuspended		Bool
	VRFKeyPair		VRFKeyPair
	VDFKeyPair		VDFKeyPair
}