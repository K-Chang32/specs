type PowerFraction 	Float
type StoragePower	UVarint

type StoragePowerConsensusSubsystem struct (@mutable) {
	powerTable						PowerTable
	actor							StoragePowerActor
	associatedStateTree 			*StateTree
	TotalStorage()					UVarint
}

type StoragePowerActor struct {

	UpdateStoragePowerSubsystem(Tipset, StateTree)
	
	VerifyElectionProof(Address, ElectionProof)	bool
	RegisterStorage(SealProof)					

	// What does graceful removal look like?
	NotifyConsensusFault(Address, [Block])
	NotifyStorageFault(Address)
	ChooseTipsetToMine([Tipset])				[Tipset]
	GenerateElectionProof(Tipset)				ElectionProof
}

type PowerTable struct {
	// all power here is always verified
	minerPower							{Address:StorageMiner}
	LookupMinerStorage(Address)			UVarint
	LookupMinerPowerFraction(Address)	Float
	RemovePower(Address)
	UpdatePower(Address, newPower)
}

type StorageMiner struct {
	minerAddress	Address
	minerStorage	UVarint
	isSuspended		Bool
	VRFKeyPair		VRFKeyPair
	VDFKeyPair		VDFKeyPair
}