
import sector "github.com/filecoin-project/specs/systems/filecoin_mining/sector"
import file "github.com/filecoin-project/specs/systems/filecoin_files/file"

type SealPublicInputs struct {}
type MerkleTree struct {}
type PieceInclusionProof struct {}
type SectorConfig struct {}

type SealResponse struct {
     UnsealedCID           sector.UnsealedSectorCID
     SealedCID             sector.SealedSectorCID
     Proof                 SealProof
//      PersistentAux         SectorPersistentAux
     MerkleTreePath        file.Path // TODO: This may be a partially-cached tree.
}

type SealProofConfig struct {
    partitionCount UInt
    subsectorsCount UInt
}

type SNARKProof struct { //<curve, system> {
     config SealProofConfig
     proofBytes Bytes
}

type FilecoinSNARKProof struct {} //<bls12-381, Groth16>

type SealProof struct {
     snarkProof      SNARKProof,
     susbsectorCount UVarint,
}

type SealProver struct {
  GenerateCommP() CID
  GenerateCommD() CID

  SealSector(
		SectorConfig   SectorConfig,
		unsealedPath   file.Path,
		sealedPath     file.Path,
		proverID       ProverID,
		ticket         Ticket, // Assuming this is defined  elsewhere.
		sectorID       union { SectorID, error, SealResponse }
  ) struct {}

  GeneratePieceInclusionProof(
    Tree          MerkleTree, //MerkleTree<Rephash>,
    PieceStart    UInt,
    PieceLength   UInt,
  ) union { error, PieceInclusionProofs }

  VerifyPieceInclusionProof() struct {}

  MaxUnsealedBytesPerSector(SectorSize UInt) UInt
}