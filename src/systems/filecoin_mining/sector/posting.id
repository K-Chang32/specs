type PartialTicket Bytes  // 32 bytes
type ChallengeTicketsCommitment Bytes
type PoStRandomness Bytes

type PoStCfg struct {
    InstanceCfg union {PoStCfgV1}  // New proof ProofInstances can add new cfg types if needed.
    ProofInstance
}

type PoStCfgV1 struct {
    Type                PoStType
    Nodes               UInt
    Partitions          UInt
    LeafChallengeCount  UInt
    ChallengeRangeSize  UInt
}

type PoStType enum {
    ElectionPoSt
    SurprisePoSt
}

// TODO: refactor these types to get rid of the squishy optional fields.
type PoStVerifyInfo struct {
    PoStCfg
    Randomness       PoStRandomness
    CommR            SealedSectorCID
    OnChain          OnChainPoStVerifyInfo
    EligibleSectors  {SectorID: SealedSectorCID}
}

type PoStCandidate struct {
    PartialTicket  // Optional —  will eventually be omitted for SurprisePoSt verification, needed for now.
    PrivateProof    PrivatePoStCandidateProof  // Optional — should be ommitted for verification.
    SectorID
    ChallengeIndex  UInt
}

type OnChainPoStVerifyInfo struct {
    // CommT       ChallengeTicketsCommitment  // Optional — only needed for SurprisePoSt. This is an as-yet unimplemented optimization.
    Candidates  [PoStCandidate]
    Randomness  PoStRandomness
    Proof       PoStProof
}

type PoStWitness struct {
    Candidates [PoStCandidate]
}

type PoStProof struct {//<curve, system> {
    Type         PoStType
    CircuitType  ConcreteCircuit
    Candidates   [PoStCandidate]
    ProofBytes   Bytes
}

type PrivatePoStCandidateProof struct {
    Algorithm     ProofAlgorithm
    Externalized  Bytes
}

type PoStCircuitType enum {
    // Every circuit type ever deployed needs to live here.
    WinStackedSDRElectionPoSt
    WinStackedSDRSurprisePoSt
    StackedDRGElectionPoSt
    StackedDRGSurprisePoSt
}
