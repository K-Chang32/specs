import file "github.com/filecoin-project/specs/systems/filecoin_files/file"
import deal "github.com/filecoin-project/specs/systems/filecoin_markets/deal"

type Path struct {}  // TODO

type SealRandomness Bytes

// SealSeed is unique to each Sector
// SealSeed is:
//    SealSeedHash(MinerID, SectorNumber, SealRandomness, UnsealedSectorCID)
type SealSeed Bytes

type SealCfg struct {
    SectorSize
    SubsectorCount  UInt
    Partitions      UInt
}

// SealVerifyInfo is the structure of all thte information a verifier
// needs to verify a Seal.
type SealVerifyInfo struct {
    SectorID
    OnChain OnChainSealVerifyInfo
}

// OnChainSealVerifyInfo is the structure of information that must go on chain.
type OnChainSealVerifyInfo struct {
    SealedCID     SealedSectorCID  // CommR
    RandomSeed    SealRandomness
    Proof         SealProof
    DealIDs       [deal.DealID]
    SectorNumber
}

// ProofAux is meta data required to generate certain proofs
// for a sector, for example PoSt.
// These should be stored and indexed somewhere by CommR.
type ProofAux struct {
    CommRLast             Commitment
    CommC                 Commitment

    // TODO: This may be a partially-cached tree.
    // this may be empty
    CachedMerkleTreePath  file.Path
}

type ProofAuxTmp struct {
    PersistentAux  ProofAux

    CommD          UnsealedSectorCID
    CommR          SealedSectorCID

    Data           Bytes
    Replica        Bytes
    KeyLayers      BytesArray
}

type SealArguments struct {
    Algorithm        SealAlgorithm
    OutputArtifacts  SealOutputArtifacts
}

type SealProof struct {//<curve, system> {
    Config      SealProofConfig
    ProofBytes  Bytes
}

type SealProofConfig struct {// TODO
}

// TODO: move into proofs lib
type FilecoinSNARKProof struct {}  //<bls12-381, Groth16>

type SealAlgorithm enum {
    // ZigZagPoRep
    StackedDRG
}

// TODO
type SealOutputArtifacts struct {}
