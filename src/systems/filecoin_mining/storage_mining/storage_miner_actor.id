import libp2p "github.com/filecoin-project/specs/libraries/libp2p"
import util "github.com/filecoin-project/specs/util"
import sealing "github.com/filecoin-project/specs/systems/filecoin_mining/sector"
import sector "github.com/filecoin-project/specs/systems/filecoin_mining/sector"
import address "github.com/filecoin-project/specs/systems/filecoin_vm/actor/address"
import block "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/block"
import poster "github.com/filecoin-project/specs/systems/filecoin_mining/storage_proving/poster"

type Seed struct {}
type SectorCommitment struct {}

type SectorExpirationQueuItem struct {
    SectorNumber  sector.SectorNumber
    Expiration    block.ChainEpoch
}

type SectorExpirationQueue struct {
    Add(sectorExpiration SectorExpirationQueuItem)
    Pop() SectorExpirationQueuItem
    Peek() SectorExpirationQueuItem
}

type StorageMinerActor struct {
    // CollateralVault CollateralVault

    Sectors                {sector.SectorNumber: sector.SealCommitment}
    SectorStates           {sector.SectorNumber: SectorState}
    ProvingSet             sector.CompactSectorSet

    SectorExpirationQueue

    // contains mostly static info about this miner
    Info                   &MinerInfo

    // TODO: add the DePledgeCollateral
    // TODO: add the Sectors
    // TODO sectors []SectorInfo CID to AMT
    // TODO provingSet []SectorInfo CID to AMT

    // TODO: should we keep the same structure as before or putting all of that into a struct?
    // TODO do we need a `slashedAt`?
    // TODO owedStorageCollateral
    // TODO ProvingPeriodEnd   Epoch

    CommitSector(onChainInfo sealing.OnChainSealVerifyInfo)  // TODO: check with Magik on sizes

    SubmitPoSt(postSubmission poster.PoStSubmission)

    // TODO: should depledge be in here or in storage market actor?

    // TODO: add GetOwner()
    // TODO: add GetPeerID()
    // TODO: add GetSectorSize()
    // TODO: add UpdatePeerID()
    // TODO: add UpdatePeerID()
    // TODO: add ChangeWorker()

    // TODO: do IsSlashed, IsLate belong here?

    DeclareFault(faultSet sector.FaultSet)

    computeProvingPeriodEndSectorState()  // TODO

    verifyPoStSubmission(postSubmission poster.PoStSubmission) bool
}

type MinerInfo struct {
    // Account that owns this miner.
    // - Income and returned collateral are paid to this address.
    // - This address is also allowed to change the worker address for the miner.
    Owner       address.Address

    // Worker account for this miner.
    // This will be the key that is used to sign blocks created by this miner, and
    // sign messages sent on behalf of this miner to commit sectors, submit PoSts, and
    // other day to day miner activities.
    Worker      address.Address

    // Libp2p identity that should be used when connecting to this miner.
    PeerId      libp2p.PeerID

    // Amount of space in each sector committed to the network by this miner.
    SectorSize  util.BytesAmount
}

/*
type CollateralVault struct {
    Pledged(Collateral) TokenAmount
    Pledge(Collateral, TokenAmount)
    DePledge(Collateral, TokenAmount)

    pledgedStorageCollateral UVarint
    pledgedConsensusCollateral UVarint
}

type Collateral union {
    | StorageDealCollateral
    | ConsensusCollateral
}

type TokenAmount UVarint # What are the units? Attofil?

type MinedSector {
    SectorID           UInt
    CommR              sector.Commitment
    FaultStatus(Epoch) Fault
}

type Fault union {
    | None
    | GracePeriod
    | Fault
}
*/

/*
ype StorageMinerActor struct {
  // Amount of power this miner has.
  power UInt

  provingPeriodEnd Epoch


  // Collateral that is waiting to be withdrawn.
  dePledgeCollateral TokenAmount

  // Time at which the depledged collateral may be withdrawn.
  dePledgeTime Epoch

  // All sectors this miner has committed.
  sectors &SectorSet

  // Sectors this miner is currently mining. It is only updated
  // when a PoSt is submitted (not as each new sector commitment is added).
  provingSet &SectorSet

  // Faulty sectors reported since last SubmitPost, up to the current proving period's challenge time.
  currentFaultSet FaultSet

  // Faults submitted after the current proving period's challenge time, but before the PoSt for that period
  // is submitted. These become the currentFaultSet when a PoSt is submitted.
  nextFaultSet FaultSet

  // Sectors reported during the last PoSt submission as being 'done'. The collateral
  // for them is still being held until the next PoSt submission in case early sector
  // removal penalization is needed.
  nextDoneSet DoneSet

  // List of sectors that this miner was slashed for.
  slashedSet optional &SectorSet

  // Deals this miner has been slashed for since the last post submission.
  arbitratedDeals {Cid:Null} // TODO

  // The height at which this miner was slashed at.
  slashedAt optional Epoch

  // The amount of storage collateral that is owed to clients, and cannot be used for collateral anymore.
  owedStorageCollateral TokenAmount

  // Internal methods
  verifySeal(sectorID SectorID, comm SealCommitment, proof SealProof)
  verifyPoSt(proofs base.PoStProof, doneSet Bitfield)

  // Getters
  GetOwner() address.Address
  GetWorkerAddr() address.Address
  GetPower() BytesAmount
  GetPeerID() PeerID
  GetSectorSize() BytesAmount
  GetCurrentProvingSet() BitField

  // SubmitPost verifies the PoSt
  SubmitPost(proofs base.PoStProof, doneSet DoneSet) bool // TODO: rename to ProvePower?
  DePledge(amt TokenAmount)

  AddCollateral()

  AbitrateDeal (deal Deal)
  SlashStorageFault() // TODO maybe add CheckStorageFault?
  UpdateFaults(faults FaultSet) // TODO rename into ReportFaults
  IsLate() (bool)
  IsSlashed() (bool)

  UpdatePeerID(pid PeerID)
  ChangeWorker(addr address.Address)

  PaymentVerifyInclusion(extra PieceInclusionVoucherData, proof InclusionProof) (bool)
  PaymentVerifyInclusion(extra BigInt, proof Bytes) (bool)
}

*/
