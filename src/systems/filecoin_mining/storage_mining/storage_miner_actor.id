import libp2p "github.com/filecoin-project/specs/libraries/libp2p"
import sealing "github.com/filecoin-project/specs/systems/filecoin_mining/sector"
import sector "github.com/filecoin-project/specs/systems/filecoin_mining/sector"
import address "github.com/filecoin-project/specs/systems/filecoin_vm/actor/address"
import block "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/block"
import poster "github.com/filecoin-project/specs/systems/filecoin_mining/storage_proving/poster"

type Seed struct {}
type SectorCommitment struct {}

type SectorExpirationQueueItem struct {
    SectorNumber  sector.SectorNumber
    Expiration    block.ChainEpoch
}

type SectorExpirationQueue struct {
    Add(i SectorExpirationQueueItem)
    Pop() SectorExpirationQueueItem
    Peek() SectorExpirationQueueItem
    Remove(n sector.SectorNumber)
}

type SectorTable struct {
    SectorSize             sector.SectorSize
    ActiveSectors          util.UVarint
    CommittedSectors       util.UVarint
    RecoveringSectors      util.UVarint
    FailingSectors         util.UVarint

    ActivePower()          block.StoragePower
    InactivePower()        block.StoragePower

    TerminationFaultCount  util.UVarint  // transient State that get reset on every constructPowerReport
}

type SectorOnChainInfo struct {
    SealCommitment  sector.SealCommitment
    State           SectorState
}

type PoStStatus struct {
    ElectionPeriodStart  block.ChainEpoch  // get updated by _onSuccessfulPoSt
    CleanupPeriodStart   block.ChainEpoch

    HasFailedCleanup(currEpoch block.ChainEpoch) bool
    IsInCleanup(currEpoch block.ChainEpoch) bool
    IsInElection(currEpoch block.ChainEpoch) bool
    HasPassedFirstCleanupChallenge(currEpoch block.ChainEpoch) bool

    ResetPoStStatus(currEpoch block.ChainEpoch)
}

type PreCommittedSector struct {
    Info           sealing.SectorPreCommitInfo
    ReceivedEpoch  block.ChainEpoch
}

type PreCommittedSectorsAMT {sector.SectorNumber: PreCommittedSector}
type SectorsAMT {sector.SectorNumber: SectorOnChainInfo}
type StagedCommittedSectorAMT {sector.SectorNumber: SectorOnChainInfo}

type StorageMinerActorState struct {
    PreCommittedSectors            PreCommittedSectorsAMT
    Sectors                        SectorsAMT
    StagedCommittedSectors         StagedCommittedSectorAMT

    // ProvingSet gets updated _onSuccessfulPoSt and _onMissedCleanUpPoSt
    // No DeclareFaults and CommitSector can happen when SM is in the isChallenged state
    ProvingSet                     sector.CompactSectorSet

    SectorTable
    SectorExpirationQueue
    PoStStatus

    // contains mostly static info about this miner
    Info                           &MinerInfo

    _isInCleanup(rt Runtime)       bool
    _isInElection(rt Runtime)      bool
    _hasFailedCleanup(rt Runtime)  bool
    _hasPassedFirstCleanupChallenge(rt Runtime) bool
    _resetPoStStatus(rt Runtime)

    _isSealVerificationCorrect(rt Runtime, onChainInfo sector.OnChainSealVerifyInfo) bool
    _sectorExists(sectorNo sector.SectorNumber) bool

    _updateFailSector(
        rt                   Runtime
        sectorNo             sector.SectorNumber
        incrementFaultCount  bool
    )
    _updateExpireSectors(rt Runtime)
    _updateCommittedSectors(rt Runtime)
    _updateClearSector(rt Runtime, sectorNo sector.SectorNumber)
    _updateActivateSector(rt Runtime, sectorNo sector.SectorNumber)
}

type StorageMinerActorCode struct {
    NotifyOfPoStCleanUpChallenge(rt Runtime)

    PreCommitSector(rt Runtime, info sector.SectorPreCommitInfo)  // TODO: check with Magik on sizes
    ProveCommitSector(rt Runtime, info sector.SectorProveCommitInfo)

    SubmitCleanUpPoSt(rt Runtime, postSubmission poster.PoStSubmission)
    SubmitElectionPoSt(rt Runtime, postSubmission poster.PoStSubmission)

    CheckCleanUpPoStSubmissionHappened(rt Runtime)

    // TODO: should depledge be in here or in storage market actor?

    DeclareFaults(rt Runtime, failingSet sector.CompactSectorSet)
    RecoverFaults(rt Runtime, recoveringSet sector.CompactSectorSet)

    _onMissedCleanUpPoSt(rt Runtime)
    _onSuccessfulPoSt(rt Runtime, postSubmission poster.PoStSubmission)

    _submitFaultReport(
        rt          Runtime
        declared    util.UVarint
        detected    util.UVarint
        terminated  util.UVarint
    )
    _submitPowerReport(rt Runtime)
    _verifyPoStSubmission(rt Runtime, postSubmission poster.PoStSubmission) bool
    _expirePreCommittedSectors(rt Runtime)
}

type MinerInfo struct {
    // Account that owns this miner.
    // - Income and returned collateral are paid to this address.
    // - This address is also allowed to change the worker address for the miner.
    Owner           address.Address

    // Worker account for this miner.
    // This will be the key that is used to sign blocks created by this miner, and
    // sign messages sent on behalf of this miner to commit sectors, submit PoSts, and
    // other day to day miner activities.
    Worker          address.Address

    // Libp2p identity that should be used when connecting to this miner.
    PeerId          libp2p.PeerID

    // Amount of space in each sector committed to the network by this miner.
    SectorSize      util.BytesAmount
    SubsectorCount  UVarint
    Partitions      UVarint
}
