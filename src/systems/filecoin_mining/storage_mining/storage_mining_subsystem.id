type StorageMiningSubsystem struct {
    storageMinerActors            [&StorageMinerActor]
    sectorIndexer                 SectorIndexerSubsystem
    storagePowerConsensus         StoragePowerConsensusSubsystem

    CurrentChain()                Chain
    CurrentEpoch()                Epoch
    CurrentTipset()               Tipset

    StartMining()
    StopMining()

    InitStorageMiningSubsystem()

    // call by StorageMiningSubsystem itself to create miner
    CreateMiner(ownerPubKey PubKey, workerPubKey PubKey, pledgeAmt TokenAmount)

    // get miner key by address
    GetMinerKeyByAddress(addr Address) PubKey

    // call by StorageProvider at the start of a deal
    // and trigger AddPieceToSector on SectorIndexer
    HandleStorageDeal(deal StorageDeal)

    // call by StorageMinerActor when error in sealing
    CommitSectorError()

    // call by BlockChain when a new block is produced
    OnNewTipset(chain Chain, epoch Epoch)

    // call by clock during BlockProduction
    // TODO: define clock better
    OnNewRound() ElectionArtifacts

    // call by StorageMiningSubsystem itself in BlockProduction
    DrawElectionProof(tk Randomness, workerKey PrivateKey) ElectionProof

    // call by StorageMiningSubsystem itself in BlockProduction
    // use T1 randomness when producing on a tipset
    // use T0 randomness when producing on a null block
    GenerateNextTicket(seed Randomness, workerKey PrivateKey) Ticket
}

/*
type PubKey struct {}
type StorageDeal struct {}
type ElectionArtifacts struct {
    TK Ticket,
    T1 Ticket,
}
type SectorID struct {}

type ElectionProof struct {
    // Output is generated from Ticket.VDFOutput output of a ticket drawn k-rounds back
    VRFArtifacts VRFArtifacts
}

type Ticket struct {
    // The VRFProof (pi_string in the RFC) is generated by running our VRF on a past ticket
    // in the ticket chain signed with the miner's keypair. This field is 97 bytes long
    // (may be compressible to 80).
    LastRoundVDF VRFArtifacts

    // The VDFResult is derived from the VRFResult of the ticket. It is the value that
    // will be used to generate future tickets or ElectionProofs.
    LastBlockVDF VDFArtifacts

    // The VDF proves a delay between tickets generated.
} // representation tuple
*/
