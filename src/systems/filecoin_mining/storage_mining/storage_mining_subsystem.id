import sectoridx "github.com/filecoin-project/specs/systems/filecoin_mining/sector_index"
import spc "github.com/filecoin-project/specs/systems/filecoin_blockchain/storage_power_consensus"
import filcrypto "github.com/filecoin-project/specs/libraries/filcrypto"
import actor "github.com/filecoin-project/specs/systems/filecoin_vm/actor"
import address "github.com/filecoin-project/specs/systems/filecoin_vm/actor/address"
import block "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/block"
import chain "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/chain"
import blockchain "github.com/filecoin-project/specs/systems/filecoin_blockchain"
import blockproducer "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/block_producer"
import deal "github.com/filecoin-project/specs/systems/filecoin_markets/deal"
import storage_proving "github.com/filecoin-project/specs/systems/filecoin_mining/storage_proving"

type SectorSize union {
    32GB    UVarint
    64GB    UVarint
}

type StorageMiningSubsystem struct {
    // TODO: constructor
    // InitStorageMiningSubsystem() struct{}

    // Component subsystems
    // StorageProvider    storage_provider.StorageProvider
    StoragePowerActor  spc.StoragePowerActor
    MinerActor         StorageMinerActor
    SectorIndex        sectoridx.SectorIndexerSubsystem
    StorageProving     storage_proving.StorageProvingSubsystem
<<<<<<< HEAD
    BlockProducer      blockproducer.BlockProducer
=======
    BlockProducer      blockproducer.BlockProducer
    electionNonce      ElectionNonce
>>>>>>> lots of progress on all functions related to ticket creation/validation, and EP creation/validation as well as randomness sampling

    // Need access to SPC in order to mine a block
    Consensus          spc.StoragePowerConsensusSubsystem

    // Need access to the blockchain system in order to query for things in the chain
    Blockchain         blockchain.BlockchainSubsystem

    // TODO: why are these here? remove?
    StartMining()
    StopMining()

    // call by StorageMiningSubsystem itself to create miner
    createMiner(
        ownerPubKey   filcrypto.PubKey
        workerPubKey  filcrypto.PubKey
        pledgeAmt     actor.TokenAmount
    )

    // get miner key by address
    GetMinerKeyByAddress(addr address.Address) filcrypto.PubKey

    // call by StorageMarket.StorageProvider at the start of a deal.
    // Triggers AddNewDeal on SectorIndexer
    // StorageDeal contains DealCID
    HandleStorageDeal(deal deal.StorageDeal)

    // call by StorageMinerActor when error in sealing
    CommitSectorError()

    // call by StorageMiningSubsystem itself in BlockProduction
    DrawElectionProof(lookbackTicket Ticket, nonce ElectionNonce, vrfKP libcrypto.VRFKeyPair) ElectionProof {

    // call by StorageMiningSubsystem itself in BlockProduction
    PrepareNewTicket(priorTicket Ticket, workerKeyPair libcrypto.VRFKeyPair) Ticket

    // call by BlockChain when a new block is produced
    OnNewBestChain()

    // call by clock during BlockProduction
    // TODO: define clock better
    OnNewRound()

    tryLeaderElection()
}
