import sectoridx "github.com/filecoin-project/specs/systems/filecoin_mining/sector_index"
import spc "github.com/filecoin-project/specs/systems/filecoin_blockchain/storage_power_consensus"
import filcrypto "github.com/filecoin-project/specs/libraries/filcrypto"
import actor "github.com/filecoin-project/specs/systems/filecoin_blockchain/vm/actor"
import address "github.com/filecoin-project/specs/systems/filecoin_blockchain/vm/address"
import base_blockchain "github.com/filecoin-project/specs/systems/filecoin_blockchain"
import blockchain "github.com/filecoin-project/specs/systems/filecoin_blockchain/blockchain"
import base_markets "github.com/filecoin-project/specs/systems/filecoin_markets"
// import piece "github.com/filecoin-project/specs/systems/filecoin_files/piece"
// import mkt "github.com/filecoin-project/specs/systems/filecoin_markets"
// import sector "github.com/filecoin-project/specs/systems/filecoin_mining/sector"

type StorageMiningSubsystem struct {
    // TODO: constructor
    // InitStorageMiningSubsystem() struct{}

    // Component subsystems
    MinerActor      StorageMinerActor
    SectorIndex     sectoridx.SectorIndexerSubsystem
    StorageProving  storageproving.StorageProvingSubsystem

    // Need access to SPC in order to mine a block
    Consensus       spc.StoragePowerConsensusSubsystem

    // Need access to the blockchain system in order to query for things in the chain
    Blockchain      base_blockchain.BlockchainSystem

    // TODO: why are these here? remove?
    StartMining()
    StopMining()

    // call by StorageMiningSubsystem itself to create miner
    createMiner(ownerPubKey filcrypto.PubKey, workerPubKey filcrypto.PubKey, pledgeAmt actor.TokenAmount)

    // get miner key by address
    GetMinerKeyByAddress(addr address.Address) filcrypto.PubKey

    // call by StorageMarket.StorageProvider at the start of a deal.
    // Triggers AddNewDeal on SectorIndexer
    HandleStorageDeal(deal base_markets.StorageDeal)

    // call by StorageMinerActor when error in sealing
    CommitSectorError()

    // call by StorageMiningSubsystem itself in BlockProduction
    DrawElectionProof(tk blockchain.Randomness, workerKey PrivateKey) base_blockchain.ElectionProof

    // call by StorageMiningSubsystem itself in BlockProduction
    // use T1 randomness when producing on a tipset
    // use T0 randomness when producing on a null block
    GenerateNextTicket(seed blockchain.Randomness, workerKey PrivateKey) base_blockchain.Ticket

    // call by BlockChain when a new block is produced
    OnNewTipset(chain base_blockchain.Chain, epoch base_blockchain.Epoch)

    // call by clock during BlockProduction
    // TODO: define clock better
    OnNewRound() base_blockchain.ElectionArtifacts
}
