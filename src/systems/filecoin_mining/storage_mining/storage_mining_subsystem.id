import sectoridx "github.com/filecoin-project/specs/systems/filecoin_mining/sector_index"
import spc "github.com/filecoin-project/specs/systems/filecoin_blockchain/storage_power_consensus"
import filcrypto "github.com/filecoin-project/specs/libraries/filcrypto"
import actor "github.com/filecoin-project/specs/systems/filecoin_vm/actor"
import address "github.com/filecoin-project/specs/systems/filecoin_vm/actor/address"
import block "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/block"
import chain "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/chain"
import blockchain "github.com/filecoin-project/specs/systems/filecoin_blockchain"
import blockproducer "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/block_producer"
import base_markets "github.com/filecoin-project/specs/systems/filecoin_markets"
import sector "github.com/filecoin-project/specs/systems/filecoin_mining/sector"
import storage_proving "github.com/filecoin-project/specs/systems/filecoin_mining/storage_proving"
import ipld "github.com/filecoin-project/specs/libraries/ipld"
// import piece "github.com/filecoin-project/specs/systems/filecoin_files/piece"
// import mkt "github.com/filecoin-project/specs/systems/filecoin_markets"
// import sector "github.com/filecoin-project/specs/systems/filecoin_mining/sector"

type StorageDealStagedNotification struct {
    Deal      base_markets.StorageDeal
    PieceRef  ipld.CID
    SectorID  sector.SectorID
}

// TODO this should be moved into storage market
type StorageProvider struct {
    NotifyStorageDealStaged(storageDealNotification StorageDealStagedNotification)
}

type StorageMiningSubsystem struct {
    // TODO: constructor
    // InitStorageMiningSubsystem() struct{}

    // Component subsystems
    StorageProvider
    StoragePowerActor  spc.StoragePowerActor
    MinerActor         StorageMinerActor
    SectorIndex        sectoridx.SectorIndexerSubsystem
    StorageProving     storage_proving.StorageProvingSubsystem
    BlockProducer      blockproducer.BlockProducer

    // Need access to SPC in order to mine a block
    Consensus          spc.StoragePowerConsensusSubsystem

    // Need access to the blockchain system in order to query for things in the chain
    Blockchain         blockchain.BlockchainSubsystem

    // TODO: why are these here? remove?
    StartMining()
    StopMining()

    // call by StorageMiningSubsystem itself to create miner
    createMiner(
        ownerPubKey   filcrypto.PubKey
        workerPubKey  filcrypto.PubKey
        pledgeAmt     actor.TokenAmount
    )

    // get miner key by address
    GetMinerKeyByAddress(addr address.Address) filcrypto.PubKey

    // call by StorageMarket.StorageProvider at the start of a deal.
    // Triggers AddNewDeal on SectorIndexer
    HandleStorageDeal(deal base_markets.StorageDeal, pieceRef ipld.CID)

    // call by StorageMinerActor when error in sealing
    CommitSectorError()

    // call by StorageMiningSubsystem itself in BlockProduction
    DrawElectionProof(tk chain.Randomness, workerKey filcrypto.PrivKey) block.ElectionProof

    // call by StorageMiningSubsystem itself in BlockProduction
    // use T1 randomness when producing on a tipset
    // use T0 randomness when producing on a null block
    GenerateNextTicket(seed chain.Randomness, workerKey filcrypto.PrivKey) block.Ticket

    // call by BlockChain when a new block is produced
    OnNewTipset(
        chain   chain.Chain
        epoch   block.ChainEpoch
        tipset  block.Tipset
    )

    // call by clock during BlockProduction
    // TODO: define clock better
    OnNewRound(newTipset block.Tipset) block.ElectionArtifacts
}
