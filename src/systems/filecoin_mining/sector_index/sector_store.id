
import sector "github.com/filecoin-project/specs/systems/filecoin_mining/sector"
import deal "github.com/filecoin-project/specs/systems/filecoin_markets/deal"
import piece "github.com/filecoin-project/specs/systems/filecoin_files/piece"

// Opaque identifier allowing read/write access to storage.
type String struct {}
type Path String

// commR to SectorMetaData
type SectorIndex struct {
  BySectorID    {sector.SectorID : sector.SectorInfo}
  ByUnsealedCID {sector.UnsealedSectorCID : sector.SectorInfo}
  BySealedCID   {sector.SealedSectorCID : sector.SectorInfo}
  ByPieceID     {piece.PieceID : sector.SectorInfo}
  ByDealID      {deal.DealCID : sector.SectorInfo}
}

type SectorStore struct {

  SectorMetaDataStore SectorMetaDataStore

  WritePiece(Piece Piece) Path // path - temp storage for pieces not yet sealed.
  PlacePiece(From Path, To StagedSector, Position UInt) struct {}

  AllocateSealedSector(SectorSize UInt) Path
  AllocateStagedSector(SectorSize UInt) Path

  RegisterMetadata(SectorMetadata SectorMetaData) bool
  GetMetaData(CommR Commitment) SectorMetaData

  UpdateMetaData(
    CommR       Commitment,
    NewMetaData SectorMetaData
  ) bool // This may not actually be needed.

  RemoveMetaData(CommR Commitment) struct {}

}
