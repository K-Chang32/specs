// Opaque identifier allowing read/write access to storage.
type String struct {}
type Path String

// This is MetaData required to generate a PoSt proof for a sector.
// These should be stored and indexed somewhere by CommR.
type SectorPersistentAux struct {
    CommRLast  Commitment
    CommC      Commitment
}

// Indexed by CommR
type SectorMetaData struct {
    CommR           Commitment
    PersistentAux   SectorPersistentAux
    MerkleTreePath  Path
}

// commR to SectorMetaData
type SectorMetaDataStore {SealedSectorID: SectorMetaData}

type SectorStore struct {
    SectorMetaDataStore

    WritePiece(Piece) Path  // path - temp storage for pieces not yet sealed.
    PlacePiece(From Path, To StagedSector, Position UInt)

    AllocateSealedSector(SectorSize UInt) Path
    AllocateStagedSector(SectorSize UInt) Path

    RegisterMetadata(SectorMetadata SectorMetaData) bool
    GetMetaData(CommR Commitment) SectorMetaData

    UpdateMetaData(
        CommR        Commitment
        NewMetaData  SectorMetaData
    ) bool  // This may not actually be needed.

    RemoveMetaData(CommR Commitment)
}
