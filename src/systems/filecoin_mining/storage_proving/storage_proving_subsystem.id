type SectorId    UInt64
type ProverId    UInt64
type Commitment  Bytes32 //[32]byte
type DataElement Bytes32 //[32]byte
//type Rephash     func(left DataElement, right DataElement) hash Commitment
type Challenge   UInt64

type FaultSet   struct {} // [Fault] // More complicated than this.
// Constants can be zero-arg methods of structs (for now).

// Add data structures to minimize individual parameters.
// PublicInputs
// Configs.

type SectorConfig struct {
       SectorSize     UInt
       SubsectorCount UInt
       Partitions     Uint
}

type SealOuput struct {}

// This is metadata required to generate a PoSt proof for a sector.
// These should be stored and indexed somewhere by CommR.
type SectorPersistentAux struct {
       CommRLast      Commitment
       CommC          Commitment
}

type StorageProvingSubsystem struct {

    SealSector(
        seed Seed,
        sectorID SectorID,
        replicaConfig ReplicaConfig,
    ) SealOutput

    GeneratePoSt(
        challenge Challenge,
        sectorIDs [SectorID]
    ) PoStProof

    // GeneratePoSt(
    //   Challenge Challenge,
    //   CommRs    Commitments, //[commmitments],
    //   Trees     MerkleTree, //MerkleTree<Rephash>,
    //   Faults    FaultSet
    // ) struct {}

    //   SealSector(
    // SectorConfig   SectorConfig,
    // unsealedPath   String,
    // sealedPath     String,
    // proverId       ProverId,
    // ticket         Ticket, // Assuming this is defined  elsewhere.
    // sectorId       union { SectorId, error, SealResponse }
    // ) struct {}

    //    Unseal(xxx Integer
    //         // TODO
    //    )

}


