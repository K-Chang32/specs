import base 	 "github.com/filecoin-project/specs/systems/filecoin_blockchain"

type ErrInvalidBlock error
type PubSubTopic struct {}

type BlockSyncer struct {
    // Note: a Block uniquely identifies a tipset (the parents)
    // from here, we may consider many tipsets that _include_ Block
    // but we must indeed include t and not consider tipsets that
    // fork from Block.Parents, but do not include Block.
    LatestCheckpoint        &Block

    blockchainSubsystem     &BlockchainSubsystem

    validationGraph         BlockValidationGraph
    validateBlockSyntax()   bool

    // on receiving newBlock event from libp2p
    // call by BlockSyncer itself
    OnNewBlock(block Block) struct {}

    // call by BlockSyncer itself in BlockReception
    // perform syntactic validation on block
    validateBlockSyntax(block Block) error

    // call by BlockProducer when a block is produced
    PropagateBlock(block Block) struct {}

}

type BlockValidationGraph struct {

    // ValidatedBlocks contains all the blocks we have validated.
    // This means all the blocks connected into the main blockchain.
    ValidatedBlocks SubchainQueue

    // ValidationFringe is the set of unvalidated partial chains fully connected
    // to the validated blockchain. These are ready to be validated, and
    // ordered by total ChainWeight. Their ancestors are all in either the
    // ValidationFringe or in the ValidatedBlocks
    ValidationFringe SubchainQueue

    // UnconnectedBlocks is the set of disconnected blocks, which
    // may or may not connect back to the growing blockchain. This set
    // could contain the heaviest chain, and could contain attackers'
    // blocks.
    UnconnectedBlocks AncestryGraph

    ConsiderBlock(block Block) error
}

// SubchainQueue keeps track of a set of blocks, organized into tipsets,
// and with a set of tipsets tracked and sorted by a function
type SubchainQueue struct {
    // Chains keeps subchains sorted to validate by chain weight
    Chains                          [Subchain]
    // Chains PQueue<Subchain>

    // ChainMembership provides efficient access from any block to the
    // Subchain in question
    ChainMembership                 {Block:Subchain}

    HasTipset(block Block)          bool
    AddBlock(block Block)           struct {}
    RemoveTipset(tipset Tipset)     struct {}
}

type AncestryGraph struct {
    Parents                         {Block:Tipset}
    Children                        {Block:[Block]}
    AddBlock(block Block)           struct {}
}

type Subchain struct {
    Head    Tipset
    Tail    Tipset
    Weight  base.ChainWeight
    Tipsets {Block:Tipset}
}

type BlockPubSub struct {}

type BlockPropagator struct {

    PropagateBlock(signedBlock SignedBlock)     struct {}
}
