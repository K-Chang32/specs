import clock "github.com/filecoin-project/specs/systems/filecoin_nodes/clock"
import stateTree "github.com/filecoin-project/specs/systems/filecoin_blockchain/vm/state_tree"

type Epoch UVarint
type SectorID struct {}
type Randomness struct {}

type Booting struct {}
type CatchingUp struct {}
type Synchronized struct {}
type SyncState union {
    Booting
    CatchingUp
    Synchronized
}

type BlockchainSubsystem struct @(mutable) {
    Clock              &clock.WallClock

    LatestEpoch()      Epoch
    BestChain()        Chain
    CandidateChains()  [Chain]

    // // Receiving blocks and tipset
    // should be channels
    NewTipsets()
    NewBestTipset()

    // validateBlockSemantics(Block)
    SyncState()        SyncState

    // time of round cutoff time for accepting new blocks
    epochCutoffTime()  clock.Time

    // call by StorageClient in StorageDealMake
    VerifySectorExists(sectorId SectorID) bool

    // call by BlockSyncer in BlockReception
    HandleBlock(block Block) bool

    // call by BlockchainSubsystem itself in BlockProduction
    ValidateBlock(block Block) bool

    // call by BlockchainSubsystem itself in BlockProduction
    // apply messages in the parent tipset to the StateTree
    // and verify state root
    TryGenerateStateTree(block Block) stateTree.StateTree

    // call by clock in BlockReception after Round Cutoff
    // TODO define clock here
    AssembleTipsets() [Tipset]

    // call by BlockchainSubsystem itself in BlockReception after Round Cutoff
    ChooseTipset(tipsets [Tipset]) Tipset

    // call by StorageMining
    GetPostRandomness() Randomness
}
