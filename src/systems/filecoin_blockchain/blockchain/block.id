import filcrypto "github.com/filecoin-project/specs/libraries/filcrypto"
import stateTree "github.com/filecoin-project/specs/systems/filecoin_blockchain/state_tree"
import clock 	 "github.com/filecoin-project/specs/systems/filecoin_nodes/clock"

type Block struct {
	MinerAddress()               stateTree.Address
	Tickets()                    [Ticket]
	ParentTipset()               Tipset
	ParentWeight()               BlockWeight
	Height()                     Word
	StateTree()                  stateTree.StateTree
	Messages()                   [Message]
//	BLSAggregate()               Signature
 	MessageReceipts()            [MessageReceipt]
	Timestamp()                  clock.Time
	BlockSig()                   Signature

//	SerializeSigned()            []byte
//	ComputeUnsignedFingerprint() []

	VerifyTickets()				bool
}

type Tipset struct {
	Blocks            [Block]

    Has(block Block)  bool			 			@(cached)
    Parents()         Tipset      		   		@(cached)
	// StateTree should live in VM
	StateTree()       stateTree.StateTree      	@(cached)
    Epoch()           Epoch          			@(cached)
    Weight()          ChainWeight    			@(cached)

	ValidateSyntax()			 	bool		@(cached)
	LatestTimestamp()				clock.Time	@(cached)
}

type Ticket struct {
	VRFResult() filcrypto.VRFResult
	VDFResult() filcrypto.VDFResult

	// Generate(k VRFKeyPair, seed ElectionSeed) Ticket
	ValidateSyntax() 	bool
	Validate()			bool
}

type ElectionProof struct {
	VRFResult() filcrypto.VRFResult
	IsWinning(minerPower PowerFraction) bool	@(cached)

	ValidateSyntax(ep &ElectionProof) bool
}

type ElectionSeed VDFResult

type ChainWeight UVarint

type Chain struct {
    HeadEpoch() Epoch
    FinalizedEpoch() Epoch
    LatestCheckpoint() Epoch

    TipsetAtEpoch(epoch Epoch) Tipset
}