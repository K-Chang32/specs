import block "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/block"

type ErrInvalidBlock error
type PubSubTopic struct {}

type BlockSyncer struct {
    // Note: a Block uniquely identifies a tipset (the parents)
    // from here, we may consider many tipsets that _include_ Block
    // but we must indeed include t and not consider tipsets that
    // fork from Block.Parents, but do not include Block.
    LatestCheckpoint  &block.Block

    // blockchainSubsystem               &block.BlockchainSubsystem

    validationGraph   BlockValidationGraph

    // on receiving newBlock event from libp2p
    // call by BlockSyncer itself
    OnNewBlock(block block.Block)

    // call by BlockSyncer itself in BlockReception
    // perform syntactic validation on block
    validateBlockSyntax(block block.Block) error

    // call by BlockProducer when a block is produced
    PropagateBlock(block block.Block)
}

type BlockValidationGraph struct {
    // ValidatedBlocks contains all the blocks we have validated.
    // This means all the blocks connected into the main blockchain.
    ValidatedBlocks    SubchainQueue

    // ValidationFringe is the set of unvalidated partial chains fully connected
    // to the validated blockchain. These are ready to be validated, and
    // ordered by total ChainWeight. Their ancestors are all in either the
    // ValidationFringe or in the ValidatedBlocks
    ValidationFringe   SubchainQueue

    // UnconnectedBlocks is the set of disconnected blocks, which
    // may or may not connect back to the growing blockchain. This set
    // could contain the heaviest chain, and could contain attackers'
    // blocks.
    UnconnectedBlocks  AncestryGraph

    ConsiderBlock(block block.Block) error
}

// SubchainQueue keeps track of a set of blocks, organized into tipsets,
// and with a set of tipsets tracked and sorted by a function
type SubchainQueue struct {
    // Chains keeps subchains sorted to validate by chain weight
    Chains           [Subchain]
    // Chains PQueue<Subchain>

    // ChainMembership provides efficient access from any block to the
    // Subchain in question
    ChainMembership  {block.Block: Subchain}

    HasTipset(block block.Block) bool
    AddBlock(block block.Block)
    RemoveTipset(tipset block.Tipset)
}

type AncestryGraph struct {
    Parents   {block.Block: block.Tipset}
    Children  {block.Block: [block.Block]}
    AddBlock(block block.Block)
}

type Subchain struct {
    Head     block.Tipset
    Tail     block.Tipset
    Weight   block.ChainWeight
    Tipsets  {block.Block: block.Tipset}
}

type BlockPubSub struct {}

type BlockPropagator struct {
    PropagateBlock(signedBlock block.SignedBlock)
}
