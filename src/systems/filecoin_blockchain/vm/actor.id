// This contains actor things that are _outside_ of VM exection.
// The VM uses this to execute actors.

type UVarint int
type TokenAmount UVarint
type ActorID UVarint

type CallSeqNo UVarint

// Question for language:
// - we should not do inheritance, we should do composition.
//   but we should make including actor state nicer.
// -
type Actor struct {
  // common fields for all actors
  // CodeCID CID
  State   ActorState
  Balance TokenAmount
  SeqNo   CallSeqNo // FKA Nonce
}

type ActorState union {
  SystemActorState SystemActorState
  // UserActorState UserActorState
}

type SystemActorState union {
	InitActorState           InitActorState
//	AccountActorState        AccountActorState
//	StoragePowerActorState   StoragePowerActorState
//	StorageMinerActorState   StorageMinerActorState
//	CronActorState           CronActorState
//	PaymentChannelActorState PaymentChannelActorState
}


// state := actor.State.as_SystemActorState().as_InitActorState()
// var actor, state := getInitActor()











// type StoragePowerActorState struct {
// 	// maintain storage power over time
// 	Meta ActorMeta
// 	PowerTableMap {Address:BytesAmount}

// 	GetPowerForMiner(Address) BytesAmount
// 	PutPowerForMiner(Address, BytesAmount) bool
// }

// type StorageMinerActorState struct {
// 	Meta ActorMeta
// 	RegisterMiner(PublicKey, BytesAmount) Address
// }

// type CronActorState struct {
// 	Meta ActorMeta
// }

// type PaymentChannelActorState struct {
// 	Meta ActorMeta
// }
