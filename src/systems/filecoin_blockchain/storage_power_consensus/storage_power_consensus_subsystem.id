import base "github.com/filecoin-project/specs/systems/filecoin_blockchain"
import filcrypto "github.com/filecoin-project/specs/libraries/filcrypto"
import blockchain "github.com/filecoin-project/specs/systems/filecoin_blockchain/blockchain"
import stateTree "github.com/filecoin-project/specs/systems/filecoin_blockchain/vm/state_tree"
import base_mining "github.com/filecoin-project/specs/systems/filecoin_mining"

type StoragePowerConsensusSubsystem struct {//(@mutable)
    powerTable           PowerTable
    actor                StoragePowerActor
    associatedStateTree  &stateTree.StateTree
    GenerateElectionProof(tipset blockchain.Tipset) base.ElectionProof
    ChooseTipsetToMine(tipsets [blockchain.Tipset]) [blockchain.Tipset]

    // call by StorageMiningSubsystem in sealing sector
    GetSealSeed(chain blockchain.Chain, epoch base.Epoch) base_mining.SealSeed

    // call by StorageMiningSubsystem after sealing
    GetPoStChallenge(chain blockchain.Chain, epoch base.Epoch) base_mining.PoStChallenge

    // call by BlockchainSubsystem during block reception
    ValidateBlock(block blockchain.Block) base.StoragePowerConsensusError

    // call by StorageMiningSubsystem during block production
    GetElectionArtifacts(chain blockchain.Chain, epoch base.Epoch) base.ElectionArtifacts

    // call by StoragePowerConsensusSubsystem itself during block production
    TicketAtEpoch(chain blockchain.Chain, epoch base.Epoch) base.Ticket

    // call by StorageMiningSubsystem during block production
    TryLeaderElection(electionProof base.ElectionProof) bool

    StoragePowerConsensusError() base.StoragePowerConsensusError

    computeTipsetWeight(tipset blockchain.Tipset) base.ChainWeight
}

type PowerTable struct {
    // all power here is always verified
    minerPower {base.Address: StorageMiner}
    LookupMinerStorage(addr base.Address) UVarint
    LookupMinerPowerFraction(addr base.Address) base.PowerFraction
    RemovePower(addr base.Address)
}

type StorageMiner struct {
    minerAddress  base.Address
    minerStorage
    VRFKeyPair    filcrypto.VRFKeyPair
}

type minerStorage UVarint
