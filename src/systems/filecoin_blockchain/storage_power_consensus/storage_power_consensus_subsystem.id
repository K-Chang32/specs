type PowerFraction 	Float
type StoragePower	UVarint
type Seed struct {}
type PoStChallenge struct {}
type ElectionArtifacts struct {
	TK Ticket
	T1 Ticket
}

type StoragePowerConsensusSubsystem struct  { //(@mutable)
	powerTable									PowerTable
	actor										StoragePowerActor
	associatedStateTree		 					&StateTree
	GenerateElectionProof(tipset Tipset)		ElectionProof
	ChooseTipsetToMine(tipsets [Tipset])		[Tipset]

	// call by StorageMiningSubsystem in sealing sector
	GetSealSeed(chain Chain, epoch Epoch) Seed

	// call by StorageMiningSubsystem after sealing
	GetPoStChallenge(chain Chain, epoch Epoch) PoStChallenge

	// call by BlockchainSubsystem during block reception
	ValidateBlock(block Block) StoragePowerConsensusError

	// call by StorageMiningSubsystem during block production
	GetElectionArtifacts(chain Chain, epoch Epoch) ElectionArtifacts

	// call by StoragePowerConsensusSubsystem itself during block production
	TicketAtEpoch(chain Chain, epoch Epoch) Ticket

	// call by StorageMiningSubsystem during block production
	TryLeaderElection(electionProof ElectionProof) bool

	// validate new incoming block
	ValidateBlock(block Block) StoragePowerConsensusError

	StoragePowerConsensusError() StoragePowerConsensusError

	computeTipsetWeight(tipset Tipset) ChainWeight
}


type PowerTable struct {
	// all power here is always verified
	minerPower									{Address:StorageMiner}
	LookupMinerStorage(addr Address)			UVarint
	LookupMinerPowerFraction(addr Address)		Float
	RemovePower(addr Address)					struct {}
}

type StorageMiner struct {
	minerAddress	Address
	minerStorage	MinerStorage
	VRFKeyPair		VRFKeyPair
	VDFKeyPair		VDFKeyPair
}

type minerStorage UVarint
type StoragePowerConsensusError Error