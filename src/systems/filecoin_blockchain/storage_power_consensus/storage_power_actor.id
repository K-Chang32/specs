import actor_util "github.com/filecoin-project/specs/systems/filecoin_vm/actor_util"
import addr "github.com/filecoin-project/specs/systems/filecoin_vm/actor/address"
import libp2p "github.com/filecoin-project/specs/libraries/libp2p"
import block "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/block"
import actor "github.com/filecoin-project/specs/systems/filecoin_vm/actor"
import sector "github.com/filecoin-project/specs/systems/filecoin_mining/sector"

type PowerTableEntry struct {
    ActivePower    block.StoragePower
    InactivePower  block.StoragePower
}

type PowerReport struct {
    ActivePower    block.StoragePower  // set value
    InactivePower  block.StoragePower  // set value
}

// type PowerTableHAMT {actor.ActorID: PowerTableEntry}
type PowerTableHAMT {addr.Address: PowerTableEntry}  // TODO: convert address to ActorID

type StoragePowerActorState struct {
    PowerTable            PowerTableHAMT
    EscrowTable           actor_util.BalanceTableHAMT
    _minersLargerThanMin  util.UVarint

    ActivePowerMeetsConsensusMinimum(minPower block.StoragePower) bool
    _getActivePowerForConsensus() block.StoragePower
    _slashPledgeCollateral(address addr.Address, amount actor.TokenAmount) actor.TokenAmount

    _getPowerTotalForMiner(minerAddr addr.Address) (
        activePower    block.StoragePower
        inactivePower  block.StoragePower
        ok             bool
    )
    _getCurrPledgeForMiner(minerAddr addr.Address) (currPledge actor.TokenAmount, ok bool)
    _getTotalPower() block.StoragePower
    _selectMinersToSurprise(challengeCount int, randomness util.Randomness) [addr.Address]
    _getStorageFaultSlashPledgePercent(faultType sector.StorageFaultType) int
}

type StoragePowerActorCode struct {
    AddBalance(rt Runtime, minerAddr addr.Address)
    WithdrawBalance(rt Runtime, amount actor.TokenAmount)

    // call by StorageMiningSubsytem on miner creation
    CreateStorageMiner(
        // TODO: document differences in Addr, Key and ID accross spec
        rt          Runtime
        ownerAddr   addr.Address
        workerAddr  addr.Address
        peerId      libp2p.PeerID  // TODO: will be removed likely (see: https://github.com/filecoin-project/specs/pull/555#pullrequestreview-300991681)
    ) addr.Address

    RemoveStorageMiner(rt Runtime, addr addr.Address)
    EnsurePledgeCollateralSatisfied(rt Runtime)
    ProcessPowerReport(rt Runtime, report PowerReport)
    SlashPledgeForStorageFault(
        rt             Runtime
        affectedPower  block.StoragePower
        faultType      sector.StorageFaultType
    )

    ReportConsensusFault(
        // slasherAddr  addr.Address TODO: fromActor
        rt         Runtime
        faultType  ConsensusFaultType
        proof      [block.Block]
    )

    Surprise(rt Runtime, ticket block.Ticket) [addr.Address]

    _rtGetPowerEntryOrAbort(rt Runtime, minerID addr.Address) PowerTableEntry
    _rtGetPledgeCollateralReqForMinerOrAbort(rt Runtime, minerAddr addr.Address) actor.TokenAmount
}
