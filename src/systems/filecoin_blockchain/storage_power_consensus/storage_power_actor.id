import actor_util "github.com/filecoin-project/specs/systems/filecoin_vm/actor_util"
import addr "github.com/filecoin-project/specs/systems/filecoin_vm/actor/address"
import block "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/block"
import actor "github.com/filecoin-project/specs/systems/filecoin_vm/actor"

type PowerTableHAMT {addr.Address: block.StoragePower}  // TODO: convert address to ActorID

type MinerEventsHAMT {block.ChainEpoch: actor_util.MinerEventSetHAMT}

type StoragePowerActorState struct {
    TotalNetworkPower         block.StoragePower

    PowerTable                PowerTableHAMT
    EscrowTable               actor_util.BalanceTableHAMT

    // Metadata cached for efficient processing of sector/challenge events.
    CachedDeferredCronEvents  MinerEventsHAMT
    PoStFailingMiners         actor_util.MinerSetHAMT
    ClaimedPower              PowerTableHAMT
    NominalPower              PowerTableHAMT
    NumMinersMeetingMinPower  int

    _slashPledgeCollateral(address addr.Address, amount actor.TokenAmount) actor.TokenAmount
    _selectMinersToSurprise(challengeCount int, randomness util.Randomness) [addr.Address]

    _addClaimedPowerForSector(
        minerAddr          addr.Address
        storageWeightDesc  SectorStorageWeightDesc
    )
    _deductClaimedPowerForSectorAssert(
        minerAddr          addr.Address
        storageWeightDesc  SectorStorageWeightDesc
    )
    _updatePowerEntriesFromClaimedPower(minerAddr addr.Address)
}

type StoragePowerActorCode struct {}
