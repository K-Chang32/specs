import filecoin_blockchain "github.com/filecoin-project/specs/systems/filecoin_blockchain"
import vm "github.com/filecoin-project/specs/systems/filecoin_blockchain/vm"


type DataTransferSubsystem struct @(mutable) {
	dataTransfers {UInt: DataTransferChannel}
	volumes       [vm.Storage]

	OpenDataTransferChannel(x vm.StorageDealID) UInt
	CloseDataTransferChannel(x UInt)         struct{}
	TransferChannelStatus(x UInt)            DataTransferStatus
	ReportDataTransferEvent(x Function)      union { Ret DataTransferStatus, Err error }

	findData(x CID) Piece
}

// Assumes access to error-checked, ordered, reliable transmission protocol
type Scheduler struct {
	ScheduleTransfer(x UInt, y Piece)        struct{}
	requestData(x DataTransferChannel)       union { Ret Bytes, Err error }
	sendData(x DataTransferChannel, y Bytes) error?
}

type DataTransferChannel struct {
	channelID     UInt
	contentID     CID
	dataIncrement	UVarint
	sender        filecoin_blockchain.Address
	recipient     filecoin_blockchain.Address
	totalSize     UVarint
	sent          UVarint
	received      UVarint

	channelType() DataTransferType  @(cached)
	transferNum() Float             @(cached)
}

type DataTransferParams struct {
	channelType   DataTransferType
	contentID     CID
	dataIncrement UVarint
	sender        filecoin_blockchain.Address
	recipient     filecoin_blockchain.Address
	totalSize     filecoin_blockchain.Address
}

type DataTransferType union {
	Sender
	Recipient
}

type DataTransferStatus union {
	Ongoing
	Completed
	Failed
	ChannelNotFoundError
}
