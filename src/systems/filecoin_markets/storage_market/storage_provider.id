import ipld "github.com/filecoin-project/specs/libraries/ipld"
import deal "github.com/filecoin-project/specs/systems/filecoin_markets/deal"
import piece "github.com/filecoin-project/specs/systems/filecoin_files/piece"

type StorageProvider struct {
    // PieceCID to status
    ProposalStatus  {ipld.CID: StorageDealProposalStatus}
    // DealID to status
    // TODO: confirm on the data type here
    DealStatus      {deal.DealID: StorageDealStatus}

    // call by StorageClient over libp2p to submit new StorageDealProposal
    HandleStorageDealProposal(proposal deal.StorageDealProposal, payloadCID ipld.CID)

    // Call by StorageProvider to sign a StorageDealProposal and notify StorageClient
    signStorageDealProposal(proposal deal.StorageDealProposal) deal.StorageDeal

    // Call by StorageProvider to accept a StorageDealProposal and notify StorageClient
    acceptStorageDealProposal(payloadCID ipld.CID)

    // Call by StorageProvider to reject a StorageDealProposal and notify StorageClient
    rejectStorageDealProposal(payloadCID ipld.CID)

    // libp2p handler on receiving payload
    OnReceivingPayload(payloadCID ipld.CID)

    // Check client balance and signature
    verifyStorageDealProposal(proposal deal.StorageDealProposal, payloadCID ipld.CID) bool

    // Check PieceCID(CommP) provided by StorageClient in StorageDealProposal
    // Provider needs to verify and reject deal if incorrect.
    // If on-chain CommP does not match actual piece, Seal proof will not verify.
    verifyPieceCID(pieceCID piece.PieceCID, payloadCID ipld.CID) bool

    // Call by StorageMiningSubsystem
    NotifyOfOnChainDealStatus(dealID deal.DealID, newStatus StorageDealStatus)

    // Call by StorageClient
    HandleStorageDealProposalQuery(payloadCID ipld.CID) StorageDealProposalStatus

    // Call by StorageClient
    HandleStorageDealQuery(dealID deal.DealID) StorageDealStatus
}
