import ipld "github.com/filecoin-project/specs/libraries/ipld"
import deal "github.com/filecoin-project/specs/systems/filecoin_markets/deal"
import piece "github.com/filecoin-project/specs/systems/filecoin_files/piece"
import msg "github.com/filecoin-project/specs/systems/filecoin_vm/message"

type StorageProvider struct {
    // StorageDealProposalCID: StorageDealStatus
    ProposalStatus  {deal.ProposalCID: StorageDealStatus}
    // DealCID: StorageDeal
    DealStatus      {deal.DealCID: StorageDealStatus}

    // libp2p listener on new StorageDealProposal
    OnNewStorageDealProposal(proposal deal.StorageDealProposal, payloadCID ipld.CID)

    // Call by StorageProvider to sign proposal and construct StorageDeal message
    signStorageDealProposal(proposal deal.StorageDealProposal) msg.SignedMessage

    // Call by StorageProvider to call sma.PublishStorageDeal
    publishStorageDealMessage(message msg.SignedMessage)

    // Call by StorageProvider to accept a StorageDealProposal and notify StorageClient
    acceptStorageDealProposal(proposal deal.StorageDealProposal)

    // Call by StorageProvider to reject a StorageDealProposal and notify StorageClient
    rejectStorageDealProposal(proposal deal.StorageDealProposal)

    // Call by StorageProvider to check client balance and signature
    verifyStorageDealProposal(proposal deal.StorageDealProposal, payloadCID ipld.CID) bool

    // Check PieceCID(CommP) provided by StorageClient in StorageDealProposal
    // Provider needs to verify and reject deal if incorrect.
    // If on-chain CommP does not match actual piece, Seal proof will not verify.
    verifyPieceCID(pieceCID piece.PieceCID, payloadCID ipld.CID) bool

    // Call by StorageMiningSubsystem
    NotifyOfOnChainDealStatus(dealID deal.DealID, newStatus StorageDealStatus)

    // libp2p listener on receiving payload
    // TODO: take in dt.DataTransferVoucher as an argument
    OnReceivingPayload(payloadCID ipld.CID)

    // libp2p listener on storage deal proposal query
    OnStorageDealProposalQuery(proposalCID deal.ProposalCID) StorageDealStatus

    // libp2p listener on storage deal query
    OnStorageDealQuery(dealCID deal.DealCID) StorageDealStatus
}
