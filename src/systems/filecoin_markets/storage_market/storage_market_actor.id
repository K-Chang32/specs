// Assumptions:
//    - Deals are on Chain 
//    - Storage Payment is done on PoSt submission
//    - Updatable Filecoin Storage Deals (Not in current version)

// Miners can pledge and commit sectors and participate
// in expected consensus to earn block rewards
// However, block rewards earned are vested for a year
// over an exponentially increasing schedule
// meaning that miners can only withdraw all of their
// block rewards from mining a particular block after a year

// The goals of the storage market subsystem are thus to
// 1) facilitate deal addition to an existing sector
// 2) update existing deal 

// A clean separation of concern is also resulted
// pledgeCollateral is now solely for consensus and pledging storage
// storageDealCollateral is for each deal and up to the transacting parties
// In the event that miners do not add deals to a sector,
// full block rewards are earned after maintaining that sector for a year

import base "github.com/filecoin-project/specs/systems/filecoin_markets"

type StorageMarketSubsystem struct {
  // need access to:
  // - DataTransferSubsystem
  //   - transfer data
  // - BlockchainSubsystem
  //   - needs access to StateTree
  //     to verify storage capacity and pledge amount
  //     and slash storage providers for storage faults
  //    - needs access to access to MessagePool if deals on chain
  // - NetworkSubsystem
  //   - needs access to MessagePubsub

  RegisterParticipant(lockedBalance TokenAmount) bool

  VerifyLockedBalance(participantAddr Address) TokenAmount

  // call by StorageProvider to publish a storaga deal on chain
  PublishStorageDeal(newStorageDeal StorageDeal) struct {}

  // call by StorageProvider to update signed storage deal for a sector
  UpdateStorageDeal(newStorageDeal StorageDeal) struct {}

  // call by CronActor on ExpiredSet
  CloseStorageDeal(targetStorageDeal StorageDeal) struct {}

  // call by CronActor on FaultSet
  SlashStorageDealCollateral(targetStorageDeal StorageDeal) struct {}

}
