import actor "github.com/filecoin-project/specs/systems/filecoin_vm/actor"
import addr "github.com/filecoin-project/specs/systems/filecoin_vm/actor/address"
import block "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/block"
import exitcode "github.com/filecoin-project/specs/systems/filecoin_vm/runtime/exitcode"
import ipld "github.com/filecoin-project/specs/libraries/ipld"
import msg "github.com/filecoin-project/specs/systems/filecoin_vm/message"
import st "github.com/filecoin-project/specs/systems/filecoin_vm/state_tree"

// Randomness is a string of random bytes
type Randomness Bytes

type ActorStateHandle struct {
    Take() actor.ActorSubstateCID
    Release(checkValue actor.ActorSubstateCID)
    UpdateRelease(newValue actor.ActorSubstateCID)

    _initValue  actor.ActorSubstateCID?
    _rt         Runtime
}

// Runtime is the VM's internal runtime object.
// this is everything that is accessible to actors, beyond parameters.
// FKA as vm.Context
type Runtime struct {
    CurrEpoch()              block.ChainEpoch

    // Randomness returns a (pseudo)random stream (indexed by offset) for the current epoch.
    Randomness(offset UInt)  Randomness

    Caller()                 addr.Address
    ValidateCallerIs(caller addr.Address)
    ValidateCallerMatches(CallerPattern)

    AcquireState() ActorStateHandle

    ReturnSuccess()
    ReturnValue(Bytes)
    ReturnError(exitCode exitcode.ExitCode)

    // Throw an error indicating a failure condition has occurred, from which the given actor
    // code is unable to recover. If an error is thrown in actor code, and not handled by any
    // of its callers, then the VM will not apply the state transition.
    //
    // Note: this should only be used for exceptional conditions, such as inconsistent state
    // values or precondition violations. Operations that may fail during normal execution
    // should use error return values, not call this method.
    Abort(string)

    // Check that the given condition is true (and call Abort if not).
    Check(bool)

    ValueSupplied() actor.TokenAmount

    // Send allows the current execution context to invoke methods on other actors in the system.
    // TODO: what are the return values here?
    Send(to addr.Address, input msg.InvocInput) msg.MessageReceipt
    DeferredSend(to addr.Address, input msg.InvocInput)

    SendAllowingErrors(to addr.Address, input msg.InvocInput) msg.MessageReceipt
    DeferredSendAllowingErrors(to addr.Address, input msg.InvocInput)

    // Create an actor in the state tree. May only be called by InitActor.
    CreateActor(codeCID actor.CodeCID, constructorParams actor.MethodParams)

    IpldGet(c ipld.CID) union {Bytes, error}
    IpldPut(x ipld.Object) ipld.CID

    _globalStateInit         st.StateTree
    _globalStatePending      st.StateTree
    _running                 bool
    _actorAddress            addr.Address
    _actorStateAcquired      bool
    _actorStateAcquiredInit  actor.ActorSubstateCID

    _valueSupplied           actor.TokenAmount
    _gasRemaining            msg.GasAmount
    _numValidateCalls        int
    _numReturnCalls          int
    _messageQueue            MessageQueue
    _output                  msg.InvocOutput
}
