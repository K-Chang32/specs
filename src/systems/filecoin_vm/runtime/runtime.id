import actor "github.com/filecoin-project/specs/systems/filecoin_vm/actor"
import addr "github.com/filecoin-project/specs/systems/filecoin_vm/actor/address"
import block "github.com/filecoin-project/specs/systems/filecoin_blockchain/struct/block"
import exitcode "github.com/filecoin-project/specs/systems/filecoin_vm/runtime/exitcode"
import filcrypto "github.com/filecoin-project/specs/algorithms/crypto"
import ipld "github.com/filecoin-project/specs/libraries/ipld"
import msg "github.com/filecoin-project/specs/systems/filecoin_vm/message"

// Runtime is the VM's internal runtime object.
// this is everything that is accessible to actors, beyond parameters.
// FKA as vm.Context
type Runtime interface {
    CurrEpoch() block.ChainEpoch

    // Randomness returns a (pseudo)random stream (indexed by offset) for the current epoch.
    Randomness(e block.ChainEpoch, offset UInt) util.Randomness

    // Note: This is the _immediate_ caller.
    // Not necessarily the actor in the From field of the initial on-chain Message.
    ImmediateCaller() addr.Address
    ValidateImmediateCallerIs(caller addr.Address)
    ValidateImmediateCallerAcceptAny()
    ValidateImmediateCallerMatches(CallerPattern)

    CurrMethodNum()        actor.MethodNum

    // The actor who mined the block in which the initial on-chain message appears.
    ToplevelBlockWinner()  addr.Address

    AcquireState()         ActorStateHandle

    SuccessReturn()        InvocOutput
    ValueReturn(Bytes)     InvocOutput
    ErrorReturn(exitCode exitcode.ExitCode) InvocOutput

    // Throw an error indicating a failure condition has occurred, from which the given actor
    // code is unable to recover. If an error is thrown in actor code, and not handled by any
    // of its callers, then the VM will not apply the state transition.
    //
    // Note: this should only be used for exceptional conditions, such as inconsistent state
    // values or precondition violations. Operations that may fail during normal execution
    // should use error return values, not call this method.
    Abort(string)

    // Check that the given condition is true (and call Abort if not).
    Assert(bool)

    CurrentBalance()  actor.TokenAmount
    ValueReceived()   actor.TokenAmount

    VerifySignature(
        signerActor  addr.Address
        sig          filcrypto.Signature
        m            filcrypto.Message
    ) bool

    // Run a (pure function) computation, consuming the gas cost associated with that function.
    // This mechanism is intended to capture the notion of an ABI between the VM and native
    // functions, and should be used for any function whose computation is expensive.
    Compute(ComputeFunctionID, args [Any]) Any

    // Send allows the current execution context to invoke methods on other actors in the system.
    SendPropagatingErrors(input InvocInput) InvocOutput
    SendCatchingErrors(input InvocInput) InvocOutput

    // Computes an address for a new actor. The returned address is intended to uniquely refer to
    // the actor even in the event of a chain re-org (whereas an ID-address might refer to a
    // different actor after messages are re-ordered).
    NewActorAddress() addr.Address

    // Create an actor in the state tree. May only be called by InitActor.
    CreateActor(
        stateCID           actor.ActorSystemStateCID
        a                  addr.Address
        initBalance        actor.TokenAmount
        constructorParams  actor.MethodParams
    )

    IpldGet(c ipld.CID) union {Bytes, error}
    IpldPut(x ipld.Object) ipld.CID
}

type InvocInput struct {
    To      addr.Address
    Method  actor.MethodNum
    Params  actor.MethodParams
    Value   actor.TokenAmount
}

type InvocOutput struct {
    ExitCode     exitcode.ExitCode
    ReturnValue  Bytes
}

type MessageReceipt struct {
    ExitCode     exitcode.ExitCode
    ReturnValue  Bytes
    GasUsed      msg.GasAmount
}  // representation tuple

type ActorExecAddressSeed struct {
    creator             addr.Address
    toplevelCallSeqNum  actor.CallSeqNum
    internalCallSeqNum  actor.CallSeqNum
}
